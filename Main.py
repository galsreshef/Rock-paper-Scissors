__author__ = 'Gal Reshef S'

# GUI module generated by PAGE version 4.25
#  in conjunction with Tcl version 8.6
#    Sep 11, 2019 05:24:05 PM +0300  platform: Windows NT

import random
import tkMessageBox

from PIL import ImageTk, Image

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import Main_Support as mf


def vp_start_gui():
    """Starting point when module is the main routine."""
    global w
    root = tk.Tk()
    mf.set_Tk_var()
    top = baseLayer(root)
    mf.init(root, top)
    root.mainloop()


w = None
score = 3


def create_baseLayer(root1, *args, **kwargs):
    """Starting point when module is imported by another program."""
    global w
    w = tk.Toplevel(root1)
    mf.set_Tk_var()
    top = baseLayer(w)
    mf.init(w, top)
    return w, top


def destroy_baseLayer():
    global w
    w.destroy()
    w = None


class baseLayer:
    def __init__(self, top=None):
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font11 = "-family {Segoe UI} -size 14 -weight normal -slant " \
                 "roman -underline 0 -overstrike 0"
        font12 = "-family System -size 10 -weight bold -slant roman " \
                 "-underline 0 -overstrike 0"

        top.geometry("578x519+650+150")
        top.title("Rock Paper Scissors")
        top.iconbitmap("Icon.ico")
        top.configure(background="#efdf9e")

        def checkWinner(player, pc):
            global score
            if player == 1:  # Rock
                if pc == 1:
                    score += 0
                if pc == 2:
                    score += -1
                if pc == 3:
                    score += 1
            if player == 2:  # Paper
                if pc == 1:
                    score += 1
                if pc == 2:
                    score += 0
                if pc == 3:
                    score += -1
            if player == 3:  # Scissors
                if pc == 1:
                    score += -1
                if pc == 2:
                    score += 1
                if pc == 3:
                    score += 0

            self.Label_Life.configure(text=score)
            if score == 1:
                tkMessageBox.showwarning("warning", 'only one life left')
            if score == 0:
                tkMessageBox.showerror("Error", "You lost")
                print mf.Credits()
                exit()
            if score == 6:
                tkMessageBox.showinfo("Victory", "You won!")
                print mf.Credits()
                exit()

        def playerMove(var):
            computer = random.randint(1, 3)
            if var == 1:
                loadPlayer = Image.open("Resources\Rock_left.jpg")
                renderPlayer = ImageTk.PhotoImage(loadPlayer)
            elif var == 2:
                loadPlayer = Image.open("Resources\Paper_left.jpg")
                renderPlayer = ImageTk.PhotoImage(loadPlayer)
            else:
                loadPlayer = Image.open("Resources\Scissors_left.jpg")
                renderPlayer = ImageTk.PhotoImage(loadPlayer)

            if computer == 1:
                loadPc = Image.open("Resources\Rock_right.jpg")
                renderPc = ImageTk.PhotoImage(loadPc)
            elif computer == 2:
                loadPc = Image.open("Resources\Paper_right.jpg")
                renderPc = ImageTk.PhotoImage(loadPc)
            else:
                loadPc = Image.open("Resources\Scissors_right.jpg")
                renderPc = ImageTk.PhotoImage(loadPc)

            self.Label_Player = tk.Label(top, image=renderPlayer)
            self.Label_Player.place(relx=0.035, rely=0.251, relheight=0.356, relwidth=0.372, height=30, width=30)
            self.Label_Player.configure(relief='groove', borderwidth="2", anchor='w', background="#ffffff")
            self.Label_Player.image = renderPlayer

            self.Label_User = tk.Label(top)
            self.Label_User.place(relx=0.175, rely=0.670, height=21, width=94)
            self.Label_User.configure(background="#efdf9e", disabledforeground="#a3a3a3", foreground="#000000",
                                      text='''User''')

            self.Label_PC = tk.Label(top, image=renderPc)
            self.Label_PC.place(relx=0.531, rely=0.251, relheight=0.356, relwidth=0.372, height=30, width=30)
            self.Label_PC.configure(relief='groove', borderwidth="2", background="#ffffff", anchor='e')
            self.Label_PC.image = renderPc

            self.Label_Pc = tk.Label(top)
            self.Label_Pc.place(relx=0.675, rely=0.670, height=21, width=94)
            self.Label_Pc.configure(background="#efdf9e", disabledforeground="#a3a3a3", foreground="#000000",
                                    text='''Computer''')

            checkWinner(var, computer)

        def nextMove():
            radioVal = v.get()
            if radioVal == 1:  # Rock
                playerMove(1)
            elif radioVal == 2:  # Paper
                playerMove(2)
            elif radioVal == 3:  # Scissors
                playerMove(3)
            else:
                tkMessageBox.showerror("Error", "Please select a move")

        v = tk.IntVar(value=0)
        self.Radiobutton_Rock = tk.Radiobutton(top, variable=v, value=1)
        self.Radiobutton_Rock.place(relx=0.069, rely=0.724, relheight=0.048, relwidth=0.093)
        self.Radiobutton_Rock.configure(activebackground="#ececec", activeforeground="#000000", background="#efdf9e",
                                        disabledforeground="#a3a3a3", foreground="#000000", highlightcolor="black",
                                        highlightbackground="#d9d9d9", justify='left', text='Rock')

        self.Radiobutton_Paper = tk.Radiobutton(top, variable=v, value=2)
        self.Radiobutton_Paper.place(relx=0.069, rely=0.771, relheight=0.048, relwidth=0.1)
        self.Radiobutton_Paper.configure(activebackground="#ececec", activeforeground="#000000", background="#efdf9e",
                                         disabledforeground="#a3a3a3", foreground="#000000", highlightcolor="black",
                                         highlightbackground="#d9d9d9", justify='left', text='Paper')

        self.Radiobutton_Scissors = tk.Radiobutton(top, variable=v, value=3)
        self.Radiobutton_Scissors.place(relx=0.069, rely=0.809, relheight=0.048, relwidth=0.119)
        self.Radiobutton_Scissors.configure(activebackground="#ececec", activeforeground="#000000", text='Scissors',
                                            background="#efdf9e", disabledforeground="#a3a3a3", foreground="#000000",
                                            highlightbackground="#d9d9d9", highlightcolor="black", justify='left')

        self.Label_Welcome = tk.Label(top)
        self.Label_Welcome.place(relx=0.242, rely=0.019, height=21, width=304)
        self.Label_Welcome.configure(background="#efdf9e", disabledforeground="#a3a3a3", font=font11,
                                     foreground="#000000", text='Welcome to Rock-Paper-Scissors')

        self.Label_Info = tk.Label(top)
        self.Label_Info.place(relx=0.017, rely=0.096, height=65, width=254)
        self.Label_Info.configure(justify='left', background="#efdf9e", disabledforeground="#a3a3a3",
                                  foreground="#000000", anchor='w',
                                  text='Hi, select your next play and click the button.\nYou get 3 lifes, '
                                       '6 to win, get to 0  and you lose!\n\nLife Remining:')

        self.Button_Exit = tk.Button(top, command=exit)
        self.Button_Exit.place(relx=0.761, rely=0.886, height=24, width=79)
        self.Button_Exit.configure(activebackground="#ececec", activeforeground="#000000", background="#d9d9d9",
                                   disabledforeground="#a3a3a3", foreground="#000000", highlightbackground="#d9d9d9",
                                   highlightcolor="black", pady="0", text='Exit')

        self.Label_Credit = tk.Label(top)
        self.Label_Credit.place(relx=0.26, rely=0.952, height=22, width=266)
        self.Label_Credit.configure(background="#efdf9e", disabledforeground="#a3a3a3", font=font12,
                                    foreground="#000000", text='Created by Gal Reshef S')

        self.Label_Life = tk.Label(top)
        self.Label_Life.place(relx=0.173, rely=0.190, height=12, relwidth=0.042)
        self.Label_Life.configure(background="white", disabledforeground="#a3a3a3",
                                  font="-family {Courier New} -size 10", foreground="#000000", text=score)

        self.Button_Play = tk.Button(top)
        self.Button_Play.place(relx=0.069, rely=0.886, height=24, width=73)
        self.Button_Play.configure(activebackground="#ececec", activeforeground="#000000", background="#d9d9d9",
                                   disabledforeground="#a3a3a3", foreground="#000000", highlightbackground="#d9d9d9",
                                   highlightcolor="black", pady="0", text='Play', command=nextMove)


if __name__ == '__main__':
    vp_start_gui()
